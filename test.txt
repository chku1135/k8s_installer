참고 : https://white-polarbear.tistory.com/m/161

[사전]
** OS : ubuntu 24.04 desktop version << test 
** cpu : 2 core 이상
** mem : 4 gb 이상 << ubuntu 24.04 version 부터 권장사항
** disk : 20 gb 이상
ubuntu 설치....
** root 설정 > sudo passwd root


[Virtualbox setting]
1. NAT Network
 - 도구 > NAT 네트워크
   ** 추후 master/worker server 포스포워딩 추가
 - master/worker vm > 네트워크 'NAT 네트워크'


[master/worker 공통]
1. 공통 package 설치
sudo apt-get install -y net-tools, openssh-server, vim, tree, htop

2. 우분투 방화벽 해제
sudo ufw disable
(확인) sudo ufw status

3. hostname
- master node server 
sudo vi /etc/hostname
master
- worker node server 
sudo vi /etc/hostname
node1 / node2

4. hosts 추가
sudo vi /etc/hosts
====================== 
10.0.2.10 k8s-master
10.0.2.11 k8s-node1
10.0.2.12 k8s-node2
 ...
======================

5. swap off
sudo swapoff -a
sudo vi /etc/fstab
#swap 부분 주석처리
(확인) free

6. ntp 설정(time synchronization)
sudo apt-get install -y ntp
## ntp 설치시 time-daemon과 충돌 시 > sudo apt remove systemd-timesyncd
sudo systemctl restart ntp
sudo systemctl status ntp
(확인) sudo ntpq -p 

7. IP Forwarding 활성화
echo '1' > /proc/sys/net/ipv4/ip_forward
(확인) cat /proc/sys/net/ipv4/ip_forward > '1' 출력

8. container-runtime 환경(containerd)
cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

9. 노드간 iptables bridge 설정
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

#재부팅 후에도 적용(sysctl 설정)
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ip4.ip_forward                  = 1
EOF

cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ip4.ip_forward                  = 1
EOF

#sysctl 적용
sudo sysctl --system

10. docker install[출처: https://koras02.tistory.com/279]
- 저장소 설정
sudo apt-get update
sudo apt-get install \ 
ca-certificates \ 
curl \ 
gnupg \
lsb-release

- Docker의 공식 GPG 키 추가
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings docker.gpg

- 레포지토리를 설정
echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

- 도커 엔진 설치
#apt 업데이트
sudo apt-get update

#Docker Engine, containerd, Docker-compose 설치
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin

# docker 설치 확인
sudo docker run hello-world

#systemd로 부팅 시 실행되도록 설정
sudo systemctl enable docker.service 
sudo systemctl enable containerd.service

11. container-runtime 환경 구성(containerd)
- containerd 사용할 기본 설정값 생성
sudo sh -c "containerd config default > /etc/containerd/config.toml"
(확인) line 1 > disabled_plugins = [] >> 공란이여야함

- cgroup 설정 << kubelet, container runtime 동일한 cgroup 드라이버 및 구성
#/etc/containerd/config.toml 해당부분 수정 
[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
  ...
  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
    SystemdCgroup = true

- docker deamon 설정
sudo vi /etc/docker/daemon.json
===============================================
{
"exec-opts": ["native.cgroupdriver=systemd"],
"log-driver": "json-file",
"log-opts": {
"max-size": "100m"
},
"storage-driver": "overlay2"
}
===============================================

sudo mkdir -p /etc/systemd/system/docker.service.d
sudo usermod -aG docker [계정명] ##sudo 없이 사용

sudo systemctl daemon-reload
sudo systemctl enable docker
sudo systemctl restart docker
sudo systemctl status docker
sudo systemctl restart containerd.service
sudo systemctl status containerd.service
sudo reboot

(확인)
docker version
docker info     ##docker cgroup 드라이버 systemd 변경 확인


12. k8s 설치

- 패키지 설치 
sudo apt-get update

- apt-transport-https package
sudo apt-get install -y apt-transport-https ca-certificates curl gpg

- package repo 공개키 다운   << 참고 https://kubernetes.io/blog/2023/08/15/pkgs-k8s-io-introduction/
sudo mkdir -p -m 755 /etc/apt/keyrings
curl -fsSl https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

- 키 정보, 레포 URL 지정
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list

- kubeadm 패키지 정보 확인
sudo apt-cache policy kubeadm

- k8s 패키지 install
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl

- k8s 패키지 version 고정
sudo apt-mark hold kubelet kubeadm kubectl

- version 확인
kubeadm version
kubectl version
kubelet --version

- 자동 시작 등록
sudo systemctl daemon-reload
sudo systemctl restart kubelet.service
sudo systemctl enable --now kubelet.service
