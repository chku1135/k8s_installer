#참고: https://sjw1995628.tistory.com/26

##Secretes

1. 개념

    1-1. 정의
    - 민감한 데이터를 안전하게 관리하기 위한 리소스
    - 비밀번호, API키, TLS 인증서와 같은 민감한 정보를 일반텍스트로 저장되지 않고, base64로 인코딩되어 저장 

    1-2.특징 
    - 민감한 정보 저장: 비밀번호, 키, 인증정보를 저장
    - 인코딩된 형식: base64로 인코딩되어 저장되며, 완전한 암호화는 아님
    - Pod와 통합: 환경 변수 또는 볼륨으로 Pod에 주입 가능 


2. 생성 방법 

    2-1. 명령어를 사용한 생성
    - kubectl create secret generic

    kubectl create secret generic app-secret \
    --from-literal=DB_Host=mysql \
    --from-literal=DB_User=root \
    --from-literal=DB_Password=paswrd

    - app-secret이라는 이름의 Secret을 생성하며, 다음과 같은 key-value쌍(DB_Host, DB_User, DB_Password)을 포함

    2-2. 파일 기반 생성 
    kubectl create secret generic app-secret --from-file=app_secret.properties
    - app_secret.properties 파일의 내용이 Secret으로 저장 

    2-3. YAML 파일을 사용한 생성 
    ==========================
    apiVersion: v1
    kind: Secret
    metadata:
      name: app-secret
    data:
      DB_Host: bXlzcWw=
      DB_User: cm9vdA==
      DB_Password: cGFzd3Jk
    ==========================

    [yaml 파일을 기반으로 Secret 생성]
    kubectl apply -f secret.yaml
    - 위 YAML 파일에서 data 필드는 base64로 인코딩 값을 포함 
    - mysql -> echo -n 'mysql' | base64 -> bXlzcWw=
    - root -> echo -n 'root' | base64 -> cm9vdA==
    - paswrd -> echo -n 'paswrd' | base64 -> cGFzd3Jk


3. Secret 확인

[Secret 확인]
kubectl get secrets
kubectl describe secret app-secret

[Secret 값보기](출력된 YAML에서 base64로 인코딩된 값을 확인
kubectl get secret app-secret -o yaml

[Secret 디코딩]
echo -n 'bXlzcWw=' | base64 --decode
--출력--
mysql
 

4. Secrets를 Pod에 주입

    4-1. 환경변수로 주입
    - Pod 정의 파일에서 envFrom 또는 env 속성을 사용하여 Secrets를 환경변수로 주입 
    - 전체 Secret 주입 (envFrom)
    - app-secret에 정의된 모든 데이터가 pod에서 참고됨 
    ===============================
    apiVersion: v1
    kind: Pod
    metadata:
      name: simple-webapp
    spec:
      containers:
      - name: simple-webapp
        image: simple-webapp-color
        envFrom:
        - secretRef:
            name: app-secret
    ===============================

    4-2. 특정 키만 주입(env)
    - POD의 DB_Password라는 환경변수에 app-secret 시크릿의 DB_Password 값을 참조한다. 
    ===============================
    apiVersion: v1
    kind: Pod
    metadata:
      name: simple-webapp-specific-env
    spec:
      containers:
      - name: simple-webapp-color
        image: simple-webapp-color
        env:
        - name: DB_Password
          valueFrom:
            secretKeyRef:
              name: app-secret
              key: DB_Password
    ===============================

    4-3. 볼륨으로 주입 
    - Secrets를 볼륨으로 마운트하여 컨테이너 내부에서 파일 형태로 접근 
    =====================================
    apiVersion: v1
    kind: Pod
    metadata:
      name: simple-webapp-volume-mount
    spec:
      containers:
      - name: simple-webapp-color
        image: simple-webapp-color
        volumeMounts:
        - name: app-secret-volume
          mountPath: "/etc/app-secret"
      volumes:
      - name: app-secret-volume
        secret:
        secretName: app-secret
    =====================================
    - /etc/app-secret : 디렉토리에 Secret의 각 키가 파일로 마운트됨
    - /etc/app-secret/DB_Password 파일에 secret에 정의된 value(DB_Password값)이 저장됨 


5. 주의사항 

    5-1. 암호화되지 않음 
    - Secret는 기본적으로 base64로 인코딩해서 가시적으로 사람들이 못읽게 했을뿐, 암호화된게 아님
    - 따라서 민감한 데이터를 암호화하려면 etcd 데이터베이스 암호화를 활성화해야함.

    5-2. RBAC 설정 
    - 동일 네임스페이스에 서 Pod나 Deployment를 생성할 수 있는 사용자는 Secret에 접근할 수 있음 
    - Pod나 Deployment의 접근권한을 보다 세밀하게 조정하기 위해서는 RBAC를 설정해야함
