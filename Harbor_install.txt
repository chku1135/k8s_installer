#참고사이트: 
https://velog.io/@gclee/Ubuntu%EC%97%90%EC%84%9C-Harbor-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%82%AC%EC%9A%A9

#참고사이트(registry-mirror 구성)
https://blog.encicle.com/ubuntu-2204-harborleul-iyonghan-registry-mirrors-guseong-02

#Harbor 설치
#설치 파일(.tar) download 경로
https://github.com/goharbor/harbor/releases
or
wget https://github.com/goharbor/harbor/releases/download/v2.13.1/harbor-offline-installer-v2.13.1.tgz


tar xvf harbor-offline-installer-v2.13.1.tgz

#harbor.yml 생성
cd ~/${harbor_directory}
cp harbor.yml.tmpl harbor.yml

#certs 생성(https://goharbor.io/docs/2.7.0/install-config/configure-https/)
#Generate a Certificate Authority Certificate (인증 기관 인증서 생성)
mkdir ~/certs
cd cerets
openssl genrsa -out ca.key 4096
openssl req -x509 -new -nodes -sha512 -days 3650 \
 -subj "/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=10.0.13" \
 -key ca.key \
 -out ca.crt

#Generate a Server Certificate (서버 인증서 생성)
mkdir ~/certs
cd cerets
openssl genrsa -out 10.0.2.13.key 4096
openssl req -sha512 -new \
    -subj "/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=10.0.2.13" \
    -key 10.0.2.13.key \
    -out 10.0.2.13.csr

cat > v3.ext <<-EOF
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names

[alt_names]
DNS.1=10.0.2.13
DNS.2=127.0.0.1
DNS.3=k8s-repo
EOF

openssl x509 -req -sha512 -days 3650 \
    -extfile v3.ext \
    -CA ca.crt -CAkey ca.key -CAcreateserial \
    -in 10.0.2.13.csr \
    -out 10.0.2.13.crt


sudo mkdir -p /data/cert
sudo cp 10.0.2.13.crt /data/cert
sudo cp 10.0.2.13.key /data/cert

cd /data/cert

#docker 사용으로 crt -> cert 변경
sudo openssl x509 -inform PEM -in 10.0.2.13.crt -out 10.0.2.13.cert

#docker cets.d ca file 업로드
#docker 설치된 server
sudo mkdir -p /etc/docker/certs.d/10.0.2.13
(생성 ca file 업로드)
10.0.2.13.cert
10.0.2.13.crt
10.0.2.13.key
ca.crt

sudo apt update
sudo apt install ca-certificates

sudo update-ca-certificate











#harbor.yaml 수정
 > hostname, port, data_volume 경로 수정
==============================================================
hostname: 10.0.2.13

# http related config
http:
  # port for http, default is 80. If https enabled, this port will redirect to https port
  port: 80

# https related config
# https:
  # https port for harbor, default is 443
  # port: 443
  # The path of cert and key files for nginx
  # certificate: /data/cert/10.0.2.13.crt
  # private_key: /data/cert/10.0.2.13.key
  # enable strong ssl ciphers (default: false)
  # strong_ssl_ciphers: false
  
  
...

# The default data volume
data_volume: /home/ubuntu/harbor/harbor_data

...
==============================================================

#data directory 생성
mkdir -p /home/ubuntu/harbor/harbor_data

#harbor install
sudo ./install.sh

#http://${hostname}:#{port} web 접근



==============================================================
============================[참고]============================
==============================================================

#(docker hub)docker repository 구축
#참고 사이트 : https://kkjsw17.tistory.com/9

##docker 내부 repository(harbor)
https://judo0179.tistory.com/entry/Private-Docker-Registry-Harbor-%EC%84%A4%EC%B9%98
https://musclebear.tistory.com/187

** test 전 push/pull test 위한 image 준비

##설치 완료 후 기존 docker repository > harbor로 변경
sudo vi /etc/docker/daemon.json
(수정)
{
    "insecure-registries":["${harbor_ip}:${port}]
}

#harbor HTTPS 인증서 (ca.crt) 복사
/etc/docker/cerets.d/${harbor_ip}/ca.crt 로 복사

sudo systemctl daemon-reexec
sudo systemctl restart docker

##k8s deploy 시 yaml 수정
containers:
- name: myapp
  image: ${harbor_ip}:${port}/myproject/myapp:1.0
  imagePullPolicy:IfNotPresent

##배포 시 harbor 로그인 필요한 경우
##k8s namespace secret 생성
kubectl create secret docker-Registry regcred \
  --docker-server=${harbor_ip}:${port} \
  --docker-username=${harbor_id} \
  --docker-password=${harbor_pw} \
  --docker-email=${email주소} \
  -n my-namespace

deployment.yaml secret 사용
spec:
  imagePullSecrets:
  - name: regcred



#harbor web 초기 id/pw
admin
Harbor12345
